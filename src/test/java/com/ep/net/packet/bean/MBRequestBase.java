package com.ep.net.packet.bean;

import com.ep.stream.MarshalException;
import com.ep.stream.OctetsStream;

//This File Is Generated By DB Generator, Do Not Modify.
/**
 *  公共部分-请求消息
 */
public class MBRequestBase implements com.ep.stream.Marshal
{
	// 账号id
	public long aid;
	// 玩家id
	public long pid;
	// 系统时间
	public long sysTime;

	public MBRequestBase()
	{
		this.aid = 0l;
		this.pid = 0l;
		this.sysTime = 0l;
	}

	public MBRequestBase(long _aid_, long _pid_, long _sysTime_)
	{
		this.aid = _aid_;
		this.pid = _pid_;
		this.sysTime = _sysTime_;
	}


	@Override
	public OctetsStream marshal(OctetsStream _os_)
	{
		_os_.marshal(aid);
		_os_.marshal(pid);
		_os_.marshal(sysTime);
		return _os_;
	}

	@Override
	public OctetsStream unmarshal(OctetsStream _os_) throws MarshalException
	{
		aid = _os_.unmarshal_long();
		pid = _os_.unmarshal_long();
		sysTime = _os_.unmarshal_long();
		return _os_;
	}

	@Override
	public final boolean equals(Object _o_)
	{
		if(this == _o_)
			return true;
		if(!(_o_ instanceof com.ep.net.packet.bean.MBRequestBase))
			return false;
		com.ep.net.packet.bean.MBRequestBase _o_t = (com.ep.net.packet.bean.MBRequestBase)_o_;
		if(aid != _o_t.aid)
			return false;
		if(pid != _o_t.pid)
			return false;
		if(sysTime != _o_t.sysTime)
			return false;
		return true;
	}

	@Override
	public final int hashCode()
	{
		int _h_ = 0;
		_h_ = 31 * _h_ + (int)(aid ^ (aid >>> 32));
		_h_ = 31 * _h_ + (int)(pid ^ (pid >>> 32));
		_h_ = 31 * _h_ + (int)(sysTime ^ (sysTime >>> 32));
		return _h_;
	}

	@Override
	public final String toString()
	{
		return toString(0);
	}

	public final String toString(int depth) {
		depth++;
		StringBuilder buffer = new StringBuilder();
		buffer.append('\n');
		for (int i = 0; i < depth - 1; i++){
			buffer.append('\t');
		}
		buffer.append('{');
		buffer.append('\n');

		for (int i = 0; i < depth; i++){
			buffer.append('\t');
		}
		buffer.append("aid").append(": ");
		buffer.append(aid);
		buffer.append(';');
		buffer.append("\n");


		for (int i = 0; i < depth; i++){
			buffer.append('\t');
		}
		buffer.append("pid").append(": ");
		buffer.append(pid);
		buffer.append(';');
		buffer.append("\n");


		for (int i = 0; i < depth; i++){
			buffer.append('\t');
		}
		buffer.append("sysTime").append(": ");
		buffer.append(sysTime);
		buffer.append(';');
		buffer.append("\n");


		for ( int i = 0 ; i < depth-1 ; i++ ) {
			buffer.append('\t');
		}
		buffer.append('}');
		buffer.append(';');
		return buffer.toString();
	}
}
