package com.ep.net.packet;

import com.ep.stream.MarshalException;
import com.ep.stream.OctetsStream;

//This File Is Generated By DB Generator, Do Not Modify.
/**
 *  请求-协议1100(测试)
 */
public class Protocol1100 extends com.ep.stream.Protocol implements com.ep.stream.Marshal
{
	public static final int PROTOCOL_TYPE = 1100;

	@Override
	public int getType()
	{
		return PROTOCOL_TYPE;
	}

	@Override
	public int getMaxSize()
	{
		return 65535;
	}

	@Override
	public byte[] toByte()
	{
		return new OctetsStream().marshal(this).getBytes();
	}

	@Override
	public void parseFrom(byte[] buff) throws MarshalException
	{
		unmarshal(OctetsStream.wrap(new com.ep.stream.Octets(buff)));
	}

	
	public com.ep.net.packet.bean.MBRequestBase reqBase;

	public Protocol1100()
	{
		this.reqBase = new com.ep.net.packet.bean.MBRequestBase();
	}

	public Protocol1100(com.ep.net.packet.bean.MBRequestBase _reqBase_)
	{
		this.reqBase = _reqBase_;
	}


	@Override
	public OctetsStream marshal(OctetsStream _os_)
	{
		reqBase.marshal(_os_);
		return _os_;
	}

	@Override
	public OctetsStream unmarshal(OctetsStream _os_) throws MarshalException
	{
		reqBase.unmarshal(_os_);
		return _os_;
	}

	@Override
	public final boolean equals(Object _o_)
	{
		if(this == _o_)
			return true;
		if(!(_o_ instanceof com.ep.net.packet.Protocol1100))
			return false;
		com.ep.net.packet.Protocol1100 _o_t = (com.ep.net.packet.Protocol1100)_o_;
		if(!reqBase.equals(_o_t.reqBase))
			return false;
		return true;
	}

	@Override
	public final int hashCode()
	{
		int _h_ = 0;
		_h_ = 31 * _h_ + reqBase.hashCode();
		return _h_;
	}

	@Override
	public final String toString()
	{
		return toString(0);
	}

	public final String toString(int depth) {
		depth++;
		StringBuilder buffer = new StringBuilder();
		buffer.append('\n');
		for (int i = 0; i < depth - 1; i++){
			buffer.append('\t');
		}
		buffer.append('{');
		buffer.append('\n');

		for (int i = 0; i < depth; i++){
			buffer.append('\t');
		}
		buffer.append("reqBase").append(":");
		buffer.append(reqBase.toString(depth));
		buffer.append("\n");

		for ( int i = 0 ; i < depth-1 ; i++ ) {
			buffer.append('\t');
		}
		buffer.append('}');
		buffer.append(';');
		return buffer.toString();
	}
}
